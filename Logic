namespace App\Http\Livewire;

use Livewire\Component;
use App\Models\Event;
use App\Models\EventRsvp;
use Illuminate\Support\Facades\Auth;

class EventList extends Component
{
    public $events;

    protected $listeners = ['rsvpUpdated' => '$refresh'];

    public function mount()
    {
        $this->events = Event::withCount('rsvps')->get();
    }

    public function rsvp($eventId)
    {
        if (Auth::check()) {
            $event = Event::findOrFail($eventId);
            if ($event->rsvps->contains('user_id', Auth::id())) {
                session()->flash('error', 'You have already RSVP\'d to this event.');
            } else {
                $event->rsvps()->create(['user_id' => Auth::id()]);
                session()->flash('success', 'You have successfully RSVP\'d to the event.');
            }
            $this->emit('rsvpUpdated');
        } else {
            session()->flash('error', 'You must be logged in to RSVP.');
        }
    }

    public function withdrawRsvp($eventId)
    {
        if (Auth::check()) {
            $event = Event::findOrFail($eventId);
            $event->rsvps()->where('user_id', Auth::id())->delete();
            session()->flash('success', 'You have successfully withdrawn your RSVP.');
            $this->emit('rsvpUpdated');
        }
    }

    public function render()
    {
        return view('livewire.event-list', [
            'events' => $this->events
        ]);
    }
}
